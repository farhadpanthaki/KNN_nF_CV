## Data processing stage to get it ready for my knn algo.
##getwd()

#Load train and test data
train_data<-read.csv("train_avlp.csv", stringsAsFactors = FALSE, na.strings="")

test_data<-read.csv("test_avlp.csv", stringsAsFactors = FALSE, na.strings="")

#Display contents of train and test data
str(train_data)
str(test_data)

#Make a dataframe of complete data
all_data<-rbind.data.frame(train_data[,-ncol(train_data)],test_data)


for(i in colnames(all_data)){
		print(paste0(i," ",sum(is.na(all_data[i]))))}

#check if there are NAs in all_data column wise
missing_val_col <- sapply(colnames(all_data), function(i) sum(is.na(all_data[i])))

#names(which.max(table(all_data["Gender"])))

for(i in colnames(all_data)){
	if(missing_val_col[i]>0){
		if(is.character(all_data[,i])){
			all_data[is.na(all_data[[i]]),i]<-names(which.max(table(all_data[[i]])))}
		else{all_data[is.na(all_data[[i]]),i]<-mean(all_data[[i]],na.rm=T)}}}

for(i in colnames(all_data)){
		print(paste0(i," ",sum(is.na(all_data[i]))))}

		nrow(all_data[-(1:nrow(train_data)),])
colnames(cbind.data.frame(all_data[1:nrow(train_data),],"Loan_Status" = train_data[,ncol(train_data)]))

#cbind.data.frame(all_data[1:nrow(train_data),],"Loan_Status" = c(train_data[,ncol(train_data)],rep(NA_character_,(nrow(all_data)-nrow(train_data)))))

data<-cbind.data.frame(all_data[1:nrow(train_data),],"Loan_Status" = train_data[,ncol(train_data)]) 

test_d<- all_data[-(1:nrow(train_data)),]
#########################################################################

#KNN testing with best k as 11
mode<-function(x)return(names(which.max(table(x))))
n<-5

k_best<-11

data<-data[-1]


normalize<-function(v){return((v[]-min(v[]))/(max(v[])-min(v[])))}

shuf<- sample(2,nrow(data),T,c(0.8,0.2))
train<- data
##
cols_w_char<-NULL
 for(i in 1:ncol(data)){
 if(is.character(data[,i]))
 cols_w_char<-c(cols_w_char,i)}
##Print the levels 
 for(i in 1:length(cols_w_char)){
	print(paste(levels(as.factor(data[,cols_w_char[i]]))))}

 for(i in cols_w_char){
		data[,i]<-as.integer(as.factor(data[,i]))}

#Implement Normalize
for(i in 1:ncol(data)){if(is.numeric(data[,i])){
			data[i]<-normalize(data[i])}}

train<- data
test_d<- all_data[-(1:nrow(train_data)),  ]

#Changed for 10 attributes can be generalised as train[,-ncol(data)]
x_train<- as.matrix(train[,-(ncol(train))])
y_train<-as.matrix(train[,ncol(train)])

#To make the character columns integers and then to normalize them
for(i in (cols_w_char+1)){
		test_d[,i]<-as.numeric(as.factor(test_d[,i]))}
    for(i in 1:ncol(test_d)){if(is.numeric(test_d[,i])){
			test_d[i]<-normalize(test_d[i])}}
x_test<- as.matrix(test_d[-1])

y_pred<-matrix(ncol=1, nrow=nrow(test_d))
for(j in 1:nrow(test_d)){
			d<-NULL 
			for(i in 1:nrow(train)){
					d[i]<-sqrt(sum((x_test[j,]-x_train[i,])^2))}
y_pred[j]<-mode(y_train[order(d)[1:k_best]])}

test_result<-cbind.data.frame("Loan_ID"= test_d[1],"Loan_Status"= y_pred)
write.csv(test_result,"RESULT_AVLP3.csv",quote=FALSE,row.names=FALSE)




