mode<-function(x)return(names(which.max(table(x))))
n<-5

#KNN

k<-seq(1,11,2)

data<-read.csv("bcw.csv",header=F,sep=",",stringsAsFactors =FALSE,na.strings = "?")
data<-data[-1]


normalize<-function(v){return((v[]-min(v[]))/(max(v[])-min(v[])))}

#To remove NA items
for(j in 1:nrow(data)){ 
for(i in 1:ncol(data)){
if(is.na(data[j,i])==T)data<-data[-j,]}}

#Implement Normalize
for(i in 1:ncol(data)){
			data[i]<-normalize(data[i])}


shuf<- sample(2,nrow(data),T,c(0.8,0.2))
train<- data[which(shuf==1),]
test<- data[which(shuf!=1),]
data<-rbind.data.frame(test,train)
o_accuracy<-matrix(nrow=n,ncol=length(k))
for(m in 1:n){
test<- data[-(floor(nrow(data)*(m-1)/5)+1:floor(nrow(data)*(m/5))),]
test<- data[floor(nrow(data)*(m-1)/5)+1:floor(nrow(data)*(m/5)),]

#Changed for 10 attributes can be generalised as train[,-ncol(data)]
x_train<- as.matrix(train[,-(ncol(train))])
y_train<-as.matrix(train[,ncol(train)])

x_test<- as.matrix(test[,-(ncol(test))])
y_test<-as.matrix(test[,ncol(test)])

y_pred<-matrix(ncol=length(k), nrow=nrow(test))
for(j in 1:nrow(test)){
			d<-NULL 
			for(i in 1:nrow(train)){
					d[i]<-sqrt(sum((x_test[j,]-x_train[i,])^2))}
for (l in 1:length(k)){

y_pred[j,l]<-mode(y_train[order(d)[1:k[l]]])}}

for (l in 1:length(k)){
t<-table(as.character(y_test),y_pred[,l])
	t
	o_accuracy[m,l]<-(t[1]+t[4])/(t[1]+t[2]+t[3]+t[4])
	o_accuracy}}

##l is the counter for the different ks and m is the counter for the different folds
mean_o_accuracy<-NULL
for( i in 1:length(k)){mean_o_accuracy[i]<-mean(o_accuracy[,i])}
a<-which(mean_o_accuracy==max(mean_o_accuracy))

print(paste(k[a]))
